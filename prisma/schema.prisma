// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}
enum TypeAnswerType {
  single
  multiple
  open 
  }

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String          @unique
  hashedPassword String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          UserRole?       @default(USER)

  tests         Test[]          @relation("UserToTests")

  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade) 
  @@unique([userId, credentialID])
}

model Test{
  id                   String       @id @default(auto()) @map("_id") @db.ObjectId
  testName              String
  questions            Question[]   @relation("TestToQuestions")  
  results              ResultTest[] @relation("TestToResults")  
  userId               String       @db.ObjectId
  user                 User         @relation("UserToTests",fields: [userId], references: [id], onDelete: Cascade)
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
}
type Image {
  url                 String
  public_id           String
  
}
model Question{
  id                   String   @id @default(uuid()) @map("_id") @db.String
  type                 TypeAnswerType
  question             String
  answers              Answer[] @relation("QuestionToAnswers")
  image                Image?
  testId               String   @db.ObjectId
  test                 Test     @relation("TestToQuestions", fields: [testId], references: [id],onDelete: Cascade)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}
model Answer {
  id                   String    @id @default(auto()) @map("_id") @db.ObjectId
  text                 String
  isCorrect            Boolean
  questionId           String    @db.String
  question             Question  @relation("QuestionToAnswers", fields: [questionId], references: [id],onDelete: Cascade)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
}

model ResultTest{
    id                   String       @id @default(auto()) @map("_id") @db.ObjectId    
    userAnswers          UserAnswer[] @relation("ResultToUserAnswers")
    test                 Test         @relation("TestToResults", fields: [testId], references: [id],onDelete: Cascade)
    testId               String       @db.ObjectId
    userName             String   
    userEmail            String       
    createdAt            DateTime     @default(now())
    updatedAt            DateTime     @updatedAt
}

model UserAnswer{
  id                   String       @id @default(auto()) @map("_id") @db.ObjectId
  questionId           String       @db.String
  answers              String[]  
  isCorrect            Boolean
  ResultTest           ResultTest   @relation("ResultToUserAnswers", fields: [ResultTestId], references: [id],onDelete: Cascade)
  ResultTestId         String       @db.ObjectId 
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
}